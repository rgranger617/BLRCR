// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// SPBLRCRsolver
Rcpp::List SPBLRCRsolver(arma::mat y, arma::mat x, arma::vec priorb, arma::mat priorB, arma::vec priorMU0, arma::mat priorlambda0, double priorkappa0, double priornu0, double aalpha, double balpha, int Kstar, int samples);
RcppExport SEXP _BLRCR_SPBLRCRsolver(SEXP ySEXP, SEXP xSEXP, SEXP priorbSEXP, SEXP priorBSEXP, SEXP priorMU0SEXP, SEXP priorlambda0SEXP, SEXP priorkappa0SEXP, SEXP priornu0SEXP, SEXP aalphaSEXP, SEXP balphaSEXP, SEXP KstarSEXP, SEXP samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type priorb(priorbSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type priorB(priorBSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type priorMU0(priorMU0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type priorlambda0(priorlambda0SEXP);
    Rcpp::traits::input_parameter< double >::type priorkappa0(priorkappa0SEXP);
    Rcpp::traits::input_parameter< double >::type priornu0(priornu0SEXP);
    Rcpp::traits::input_parameter< double >::type aalpha(aalphaSEXP);
    Rcpp::traits::input_parameter< double >::type balpha(balphaSEXP);
    Rcpp::traits::input_parameter< int >::type Kstar(KstarSEXP);
    Rcpp::traits::input_parameter< int >::type samples(samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(SPBLRCRsolver(y, x, priorb, priorB, priorMU0, priorlambda0, priorkappa0, priornu0, aalpha, balpha, Kstar, samples));
    return rcpp_result_gen;
END_RCPP
}
// condBLRCRsolver
Rcpp::List condBLRCRsolver(arma::mat y, arma::mat x, arma::vec priorb, arma::mat priorB, double gradparam, int prior, double tol, int maxiter);
RcppExport SEXP _BLRCR_condBLRCRsolver(SEXP ySEXP, SEXP xSEXP, SEXP priorbSEXP, SEXP priorBSEXP, SEXP gradparamSEXP, SEXP priorSEXP, SEXP tolSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type priorb(priorbSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type priorB(priorBSEXP);
    Rcpp::traits::input_parameter< double >::type gradparam(gradparamSEXP);
    Rcpp::traits::input_parameter< int >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(condBLRCRsolver(y, x, priorb, priorB, gradparam, prior, tol, maxiter));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BLRCR_SPBLRCRsolver", (DL_FUNC) &_BLRCR_SPBLRCRsolver, 12},
    {"_BLRCR_condBLRCRsolver", (DL_FUNC) &_BLRCR_condBLRCRsolver, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_BLRCR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
